<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://mood2.karottc.com/</id>
  <title>杂思未济</title>
  <updated>2018-08-15T11:10:17Z</updated>
  <link rel="alternate" href="http://mood2.karottc.com/"/>
  <link rel="self" href="http://mood2.karottc.com/atom.xml"/>
  <author>
    <name>karottc</name>
    <uri>http://mood2.karottc.com</uri>
  </author>
  <entry>
    <id>tag:mood2.karottc.com,2018-08-15:/posts/2018-08-15-resignation-process/</id>
    <title type="html">离职交接的这个月</title>
    <published>2018-08-15T07:10:17Z</published>
    <updated>2018-08-15T11:10:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-08-15-resignation-process/"/>
    <content type="html">&lt;h2 id="序"&gt;序&lt;/h2&gt;
&lt;p&gt;上个月最后最后一两天（2018.07.30）跟直属leader聊了一下，说想回成都了。并没有挽留，连传说中对离职员工客气的挽留也没有，只是反复确认了好多次，问我是否真的是回成都，还是去外面别的公司。没有挽留，也许是我回成都这个理由无法反驳，也许是觉得走了更好吧。&lt;/p&gt;
&lt;p&gt;第二天（2018.07.31）开始安排离职交接，以及直属leader的leader（总监）和我简单沟通了一下，随便聊了聊成都现在的形式，嘱咐我做好工作交接，此外，并无多余的内容。&lt;/p&gt;
&lt;p&gt;在这两次聊完之后，我在内部系统发起了线上离职流程，确定的 &lt;strong&gt;last work day&lt;/strong&gt; 是这个月24号周五（2018.08.24）。利用一下午的时间迅速完成了交接文档，因为交接文档的提纲，我已经早就开始写了，现在只是补充上具体每个部分的内容。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201808_01_resign-doc.png" alt="交接文档提纲" /&gt;&lt;figcaption&gt;交接文档提纲&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="聚餐"&gt;聚餐&lt;/h2&gt;
&lt;p&gt;凡有大事发生，聚餐是永恒的话题。在开始走离职流程，进行工作交接的时候，就把聚餐提上了日程，毕竟没有新的工作需要进行，时间也就多了。&lt;/p&gt;
&lt;h3 id="大学同学"&gt;大学同学&lt;/h3&gt;
&lt;h3 id="第一个公司同事"&gt;第一个公司同事&lt;/h3&gt;
&lt;h3 id="京东的同事同学"&gt;京东的同事（同学）&lt;/h3&gt;
&lt;h3 id="我们组小团队"&gt;我们组小团队&lt;/h3&gt;
&lt;h3 id="几个产品好友"&gt;几个产品好友&lt;/h3&gt;
&lt;h2 id="提升计划"&gt;提升计划&lt;/h2&gt;
&lt;h3 id="看一本书"&gt;看一本书&lt;/h3&gt;
&lt;h3 id="section"&gt;&lt;/h3&gt;
</content>
  </entry>
  <entry>
    <id>tag:mood2.karottc.com,2018-07-28:/posts/2018-07-28-ready-back-to-chengdu/</id>
    <title type="html">准备回成都了</title>
    <published>2018-07-28T07:10:17Z</published>
    <updated>2018-07-28T11:10:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-07-28-ready-back-to-chengdu/"/>
    <content type="html">&lt;p&gt;准备回成都了。&lt;/p&gt;
&lt;p&gt;时也，命也，来深圳工作5年了（算上第一次踏上深圳，快6年了），刚好这个时间点准备回去了，也许这就是历史的进程。&lt;/p&gt;
&lt;p&gt;想回去的想法，两年前就有了，只是当时不强烈了，也没有太关注一些机会，后面这两年陆续和公司的成都分部的人聊了一些，但大多结果不好。大概一个月前，某次和老大聊天之后，就去外面网站更新了一下个人简历，然后开始找成都的工作了。&lt;/p&gt;
&lt;p&gt;所以，现在决定回去了。&lt;/p&gt;
&lt;p&gt;有些思考在里面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这5年的大公司经历/经验，够了（可能自己不是很适合大公司）；&lt;/li&gt;
&lt;li&gt;这个创业公司做教育的，我有兴趣，也认可；&lt;/li&gt;
&lt;li&gt;如果以后要创业的话，这个路径应该更大的提高成功率：
&lt;ol type="1"&gt;
&lt;li&gt;先加入大公司，学习优点、模式、方式；&lt;/li&gt;
&lt;li&gt;再加入小一点比较成功的创业公司，学习创业公司的模式，同时把大公司的东西用于这里相互印证提高；&lt;/li&gt;
&lt;li&gt;选一个真正的创业公司，加入；&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;深圳市一个好城市，可惜，我在这里找不到归属感，就走了吧。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201807_05_2012-sz.jpg" alt="2012年刚来深圳拍摄" /&gt;&lt;figcaption&gt;2012年刚来深圳拍摄&lt;/figcaption&gt;
&lt;/figure&gt;
</content>
  </entry>
  <entry>
    <id>tag:mood2.karottc.com,2018-07-14:/posts/2018-07-14-leetcode/</id>
    <title type="html">完成LeetCode第二阶段练习</title>
    <published>2018-07-14T11:10:17Z</published>
    <updated>2018-07-14T11:10:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-07-14-leetcode/"/>
    <content type="html">&lt;p&gt;今天做完了&lt;a href="https://leetcode-cn.com/"&gt;LeetCode中国&lt;/a&gt;上面的中级算法的所有题目，从完成&lt;a href="http://mood2.karottc.com/posts/2018-06-18-leetcode/"&gt;第一个阶段的练习&lt;/a&gt;到现在，不到一个月的时间，这个速度让我有点诧异。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201807_02_leetcode.png" alt="LeetCode阶段练习" /&gt;&lt;figcaption&gt;LeetCode阶段练习&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;因为初级练习做了接近两个，而这个中级练习做了不到一个月，现在看有点难以置信，而且目前感觉也有点怪怪的。做完第一阶段的练习时，感觉算法能力提升，可以解决很多问题，信心满满。可是做完第二个阶段的中级练习，感觉自己不会做算法题了，脑袋一片空白，觉得自己什么也不会了，心情有点焦虑，难道自己得了失忆症，但是看到具体的题目时，又能很快的有思路和解法办法——这明显是得益于第二阶段的练习。这种感觉还要再继续琢磨一下。😮😮😮😮😮😮😮&lt;/p&gt;
&lt;p&gt;做完这个两个练习，加上平时偶尔和同学讨论去做的几道题，目前正好完成了 &lt;strong&gt;100道题&lt;/strong&gt;。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201807_03_leetcode.png" alt="LeetCode总进度" /&gt;&lt;figcaption&gt;LeetCode总进度&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;题目还是要继续做，但应该要降低一下频率了，大概每周一题吧。只是在做题之外把中心放到别的地方，比如分布式、Go、Docker、网络等等。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:mood2.karottc.com,2018-07-04:/posts/2018-07-04-code-life/</id>
    <title type="html">关于编程职业生涯的焦虑</title>
    <published>2018-07-04T14:08:17Z</published>
    <updated>2018-07-04T14:08:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-07-04-code-life/"/>
    <content type="html">&lt;h2 id="序"&gt;序&lt;/h2&gt;
&lt;p&gt;今天在&lt;a href="https://coolshell.cn/"&gt;左耳朵耗子&lt;/a&gt;的&lt;a href="https://time.geekbang.org/column/intro/48"&gt;极客时间专栏&lt;/a&gt;看到有个人在文章下面的评论和他的回复，有些感触，遂写几笔。&lt;/p&gt;
&lt;h2 id="编程的职业生涯"&gt;编程的职业生涯&lt;/h2&gt;
&lt;p&gt;耗子哥在这个专栏里面更新了很多技术、职业发展、程序员如何提高技术、怎么对待自己的技术生涯的文章，最近在更新的系列是 &lt;strong&gt;程序员的练级攻略&lt;/strong&gt;，从基础入门，到成长为高手要学习的知识，有人在其中一篇文章的问答如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201807_01_code_life.png" alt="问答" /&gt;&lt;figcaption&gt;问答&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在技术这条路上，要成长为高手和专家，需要花大量的时间，等变成高手或者专家的时候，或许已经35岁了，由于一直流传程序员是吃青春饭的说法，35岁年龄大了就找不到工作了，所以提出这个问题，觉得学完的时候就是失业的时候。&lt;/p&gt;
&lt;p&gt;作者的回答相当于给我吃了一个定心丸，等你学有所成，便不会担心失业。我这几年在技术的道路一直不坚定，「程序员是吃青春饭的」这句话一直像梦魇一直萦绕在我身边，让我一直在思考年龄大了应该做什么、怎么办，由于觉得10年之后技术无用，所以也就无法沉淀的学习技术。所以，不坚定并不是我对技术没有热情，而是这个热情败给了现实，毕竟我不是一个人，能赚钱很重要。这个回答也恰好解惑，坚定的提高技术，不需要去担心以后会失业的问题。&lt;/p&gt;
&lt;h2 id="尾"&gt;尾&lt;/h2&gt;
&lt;p&gt;今天电话面试了一个公司——【比特大陆】，全程聊项目，没有问任何基础和算法相关的知识，面的结果不怎么好，由于最近都是在看算法和复习基础知识，这部分疏忽了，这也说明，就算是自己亲手做过的项目，如果不提前准备，临场也会是一脸懵逼。&lt;/p&gt;
&lt;p&gt;Go on ~&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:mood2.karottc.com,2018-06-24:/posts/2018-06-24-zoho-notebook/</id>
    <title type="html">Evernote替代品——ZOHO Notebook</title>
    <published>2018-06-24T02:10:17Z</published>
    <updated>2018-06-24T02:30:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-06-24-zoho-notebook/"/>
    <content type="html">&lt;p&gt;今天在群里听人推荐了一个Evernote的替代品，叫 &lt;a href="https://notebook.zoho.com/app/index.html#/notebooks"&gt;ZOHO Notebook&lt;/a&gt;。由于苦Evernote久已，所以马上就去注册试用了一下，顺便了解了一下 ZOHO 这个公司，发现这是一个底蕴深厚的大公司，值得信赖。&lt;/p&gt;
&lt;p&gt;这个软件是在2016年Evernote 提升收费标准的时候，上线了第一版，宣传语就是要替代Evernote。所以网站直接提供了一个很方便的从evernote自动迁移数据到ZOHO的能力：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_08_notebook.png" alt="迁移Evernote数据" /&gt;&lt;figcaption&gt;迁移Evernote数据&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;我差不多5个G数据，迁移了10个小时左右，迁移完成之后会发邮件通知。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_09_notebook.png" alt="迁移完成" /&gt;&lt;figcaption&gt;迁移完成&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;笔记全部变成了彩色了，一眼看上去还行，但是点进去看具体的页面，就感觉挺丑的，五颜六色的看上去也有一种不正式的感觉，并不是很适合做知识管理。&lt;/p&gt;
&lt;p&gt;发展了两年的ZOHO Notebook 还有几点不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索还需要优化，比较少的时候搜索很精准，但是我把全部笔记导入进去之后，就搜索不准确了，想要的搜不出来；&lt;/li&gt;
&lt;li&gt;到现在为止也没有windows客户端；&lt;/li&gt;
&lt;li&gt;多级嵌套，Evernote里面这个功能叫笔记本组，只能两级，但是ZOHO Notebook，只能一级，还差的老远，最好的是想的能够任意层级；&lt;/li&gt;
&lt;li&gt;网页剪切、收藏还需要普及。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前看和Evernote还是不能比，所以这次又是一次失败的尝试。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:mood2.karottc.com,2018-06-23:/posts/2018-06-23-inorder-binary-tree/</id>
    <title type="html">中序遍历二叉树</title>
    <published>2018-06-23T03:17:17Z</published>
    <updated>2018-06-23T03:30:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-06-23-inorder-binary-tree/"/>
    <content type="html">&lt;h2 id="序"&gt;序&lt;/h2&gt;
&lt;p&gt;早上做题，终于靠自己实力做出了多年都没有搞定的题目：&lt;strong&gt;非递归中序遍历二叉树&lt;/strong&gt;。以前碰到这个题想很久想不出来，然后就去网上找一下别人的思路和答案，理解之后记住，然而，过段时间又忘了，下次碰到又得重新来。&lt;/p&gt;
&lt;p&gt;这次终于在不查任何资料的情况下做出来了，对刷题又有了信心。&lt;/p&gt;
&lt;h2 id="题目"&gt;题目&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-medium/32/trees-and-graphs/85/"&gt;LeetCode题目&lt;/a&gt;的中文描述如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二叉树，返回它的中序遍历。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;输入: [&lt;span class="dv"&gt;1&lt;/span&gt;,null,&lt;span class="dv"&gt;2&lt;/span&gt;,&lt;span class="dv"&gt;3&lt;/span&gt;]
  &lt;span class="dv"&gt;1&lt;/span&gt;
   \
    &lt;span class="dv"&gt;2&lt;/span&gt;
   /
  &lt;span class="dv"&gt;3&lt;/span&gt;

输出: [&lt;span class="dv"&gt;1&lt;/span&gt;,&lt;span class="dv"&gt;3&lt;/span&gt;,&lt;span class="dv"&gt;2&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进阶: 递归算法很简单，你可以通过迭代算法完成吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;英文描述如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the inorder traversal of its nodes’ values.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;Input: [&lt;span class="dv"&gt;1&lt;/span&gt;,null,&lt;span class="dv"&gt;2&lt;/span&gt;,&lt;span class="dv"&gt;3&lt;/span&gt;]
  &lt;span class="dv"&gt;1&lt;/span&gt;
   \
    &lt;span class="dv"&gt;2&lt;/span&gt;
   /
  &lt;span class="dv"&gt;3&lt;/span&gt;

Output: [&lt;span class="dv"&gt;1&lt;/span&gt;,&lt;span class="dv"&gt;3&lt;/span&gt;,&lt;span class="dv"&gt;2&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Follow up: Recursive solution is trivial, could you do it iteratively?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="思路"&gt;思路&lt;/h3&gt;
&lt;p&gt;看到要求非递归遍历，直接就能想到不用递归就得用迭代或栈来代替，而这个地明显就只能用栈&lt;sup&gt;&lt;a href="#fn:1" name="fnref:1"&gt;1&lt;/a&gt;&lt;/sup&gt;，确定用栈，剩下就是考虑怎么入栈和出栈，避免重复访问、遗漏等问题了，所以我在栈之外设计两个list保存已访问的元素（判断当前元素是否可以被访问）和正在栈中的元素（避免重复入栈）。&lt;/p&gt;
&lt;p&gt;具体代码如下：&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;&lt;span class="co"&gt;/**&lt;/span&gt;
&lt;span class="co"&gt; * Definition for a binary tree node.&lt;/span&gt;
&lt;span class="co"&gt; * struct TreeNode {&lt;/span&gt;
&lt;span class="co"&gt; *     int val;&lt;/span&gt;
&lt;span class="co"&gt; *     TreeNode *left;&lt;/span&gt;
&lt;span class="co"&gt; *     TreeNode *right;&lt;/span&gt;
&lt;span class="co"&gt; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}&lt;/span&gt;
&lt;span class="co"&gt; * };&lt;/span&gt;
&lt;span class="co"&gt; */&lt;/span&gt;
&lt;span class="kw"&gt;class&lt;/span&gt; Solution {
&lt;span class="kw"&gt;public&lt;/span&gt;:
    vector&amp;lt;&lt;span class="dt"&gt;int&lt;/span&gt;&amp;gt; inorderTraversal(TreeNode* root) {
        vector&amp;lt;&lt;span class="dt"&gt;int&lt;/span&gt;&amp;gt; r;
        stack&amp;lt;TreeNode *&amp;gt; s;
        TreeNode * p = root;
        set&amp;lt;TreeNode *&amp;gt; st1; &lt;span class="co"&gt;// 已访问的&lt;/span&gt;
        set&amp;lt;TreeNode *&amp;gt; st2;  &lt;span class="co"&gt;// 已在栈中的&lt;/span&gt;

        &lt;span class="cf"&gt;while&lt;/span&gt; (p != NULL) {
            &lt;span class="cf"&gt;if&lt;/span&gt; (st1.count(p-&amp;gt;left) &amp;gt; &lt;span class="dv"&gt;0&lt;/span&gt;) {
                r.push_back(p-&amp;gt;val);
                st1.insert(p);
                
                &lt;span class="cf"&gt;if&lt;/span&gt; (!s.empty()) {
                    p = s.top();
                    s.pop();
                    st2.erase(p);
                } &lt;span class="cf"&gt;else&lt;/span&gt; {
                    p = NULL;
                }
                
                &lt;span class="cf"&gt;continue&lt;/span&gt;;
            }
            
            &lt;span class="cf"&gt;if&lt;/span&gt; (p-&amp;gt;right != NULL) {
                &lt;span class="cf"&gt;if&lt;/span&gt; (st1.count(p-&amp;gt;right) == &lt;span class="dv"&gt;0&lt;/span&gt;
                   &amp;amp;&amp;amp; st2.count(p-&amp;gt;right) == &lt;span class="dv"&gt;0&lt;/span&gt;) {
                    s.push(p-&amp;gt;right);
                    st2.insert(p-&amp;gt;right);
                }
            }

            &lt;span class="cf"&gt;if&lt;/span&gt; (p-&amp;gt;left != NULL) {
                s.push(p);
                s.push(p-&amp;gt;left);
            } &lt;span class="cf"&gt;else&lt;/span&gt; {
                r.push_back(p-&amp;gt;val);
                st1.insert(p);
            }
            &lt;span class="cf"&gt;if&lt;/span&gt; (!s.empty()) {
                p = s.top();
                s.pop();
                st2.erase(p);
            } &lt;span class="cf"&gt;else&lt;/span&gt; {
                p = NULL;
            }
        }
        &lt;span class="cf"&gt;return&lt;/span&gt; r;
    }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="结果"&gt;结果&lt;/h3&gt;
&lt;p&gt;最后也是一次AC，自己的基本功还是可以。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_10_binary_tree.png" alt="中序遍历二叉树结果" /&gt;&lt;figcaption&gt;中序遍历二叉树结果&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="总结"&gt;总结&lt;/h2&gt;
&lt;p&gt;看来刷题确实有助于提升思维，这个可以继续坚持下去。&lt;/p&gt;
&lt;h4 id="footnotes"&gt;Footnotes&lt;/h4&gt;
&lt;p&gt;&lt;sup&gt;&lt;a href="#fnref:1" name="fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; 比如二分查找，如果不用递归，就需要用迭代来完成。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:mood2.karottc.com,2018-06-22:/posts/2018-06-23-internet-history/</id>
    <title type="html">互联网发展史</title>
    <published>2018-06-22T16:10:17Z</published>
    <updated>2018-06-22T16:30:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-06-23-internet-history/"/>
    <content type="html">&lt;p&gt;本文记录一下互联网的发展史，程序员也可以从中窥见技术趋势。&lt;/p&gt;
&lt;h3 id="互联网史前时代"&gt;互联网史前时代&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1989：英国科学家蒂姆·伯纳斯-李发明了“WWW”（万维网）&lt;/li&gt;
&lt;li&gt;1990：互联网向公众开放&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="web1.0-时代"&gt;Web1.0 时代&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1991：第一个网页浏览器在互联网上向公众开放&lt;/li&gt;
&lt;li&gt;1995：&lt;a href="http://Amazon.com" class="uri"&gt;http://Amazon.com&lt;/a&gt;上线&lt;/li&gt;
&lt;li&gt;1996：“Internet”（互联网）一词广泛流传&lt;/li&gt;
&lt;li&gt;1998：Google成立、微软IE取代网景成为主要浏览器
&lt;ul&gt;
&lt;li&gt;阿里、百度、腾讯成立&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2000：互联网泡沫破灭、中国上网计算机约892万台，上网用户数约2250万&lt;/li&gt;
&lt;li&gt;2001：中国互联网协会成立&lt;/li&gt;
&lt;li&gt;2002：eBay 15亿美元并购PayPal&lt;/li&gt;
&lt;li&gt;2003：时代华纳解散网景
&lt;ul&gt;
&lt;li&gt;阿里淘宝成立（上线）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2004：
&lt;ul&gt;
&lt;li&gt;Facebook成立开启社交网络&lt;/li&gt;
&lt;li&gt;Google上市&lt;/li&gt;
&lt;li&gt;百度上市&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2005：搜索、电子商务年、Web2.0兴起、Youtube成立
&lt;ul&gt;
&lt;li&gt;腾讯拍拍成立&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="web2.0-时代"&gt;Web2.0 时代&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2006：热炒Web2.0、社交网络、RSS、AWS、网络视频、VoIP、浏览器大战&lt;/li&gt;
&lt;li&gt;2007：网游批量上市、社交网络、SP没落、电商、Web2.0冬天、CN域名&lt;/li&gt;
&lt;li&gt;2008：中国网民2.5亿超美国居全球第一、社交网络、云计算、淘宝、移动互联网、视频网站寡头统治&lt;/li&gt;
&lt;li&gt;2009：手机网民2.33亿占3.84亿总网民的60.8%、3G元年、Twitter、淘宝、云计算、偷菜、微博、国家网络电视台、视频版权&lt;/li&gt;
&lt;li&gt;2010：微博、千团大战、第四轮上市潮、开放平台、Android、应用商店
&lt;ul&gt;
&lt;li&gt;APP 开发呈井喷趋势&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="app时代"&gt;APP时代&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2011：微博、电商、腾讯开放平台、团购洗牌
&lt;ul&gt;
&lt;li&gt;微信上线开启即时聊天新时代&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2012：电商价格战、团购倒闭潮、视频网站抱团、Android逆袭、页游井喷、旅游网站洗牌
&lt;ul&gt;
&lt;li&gt;阿里淘宝、天猫；&lt;/li&gt;
&lt;li&gt;京东&lt;/li&gt;
&lt;li&gt;腾讯易迅、拍拍；（2014年被京东收购，2015年10月正式下线停服。）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2013：手机网民5亿占6.18亿总网民的81%、4G元年、余额宝、O2O、OTT、自媒体、大数据、可穿戴设备、互联网精神、垄断
&lt;ul&gt;
&lt;li&gt;P2P 井喷&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="o2o互联网-时代"&gt;O2O、互联网+ 时代&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2014：手机网民5.57亿占6.49亿总网民的85.8%、微信红包、P2P跑路、O2O、智能硬件与众筹、女性社区、在线教育和在线医疗、电视盒子风波、互联网思维、微商、众筹&lt;/li&gt;
&lt;li&gt;2015：手机网民6.20亿占6.88亿总网民的90.1%、互联网+、合并垄断、O2O、共享经济、VR、众筹&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="人工智能大数据时代"&gt;人工智能、大数据时代&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2016：手机网民6.95亿占7.31亿总网民的95.1%、直播、共享经济、内容付费、网红经济、人工智能、互联网金融、区块链&lt;/li&gt;
&lt;li&gt;2017：手机网民7.53亿占7.72亿总网民的97.5%、共享经济、新零售、人工智能
&lt;ul&gt;
&lt;li&gt;王者荣耀上半年爆火，下半年衰落，被吃鸡手游代替&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2018：
&lt;ul&gt;
&lt;li&gt;人工智能&lt;/li&gt;
&lt;li&gt;区块链安全问题严重&lt;/li&gt;
&lt;li&gt;抖音短视频爆火（5月日活1.5亿）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <id>tag:mood2.karottc.com,2018-06-21:/posts/2018-06-22-failed-leetcode/</id>
    <title type="html">刷题——没有信心了</title>
    <published>2018-06-21T16:10:17Z</published>
    <updated>2018-06-21T16:30:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-06-22-failed-leetcode/"/>
    <content type="html">&lt;p&gt;今天继续做题，有点丧失信心了。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leetcode-cn.com/problems/longest-palindromic-substring/description/"&gt;LeetCode第五题&lt;/a&gt;，今天在中级算法的练习中碰到了，前几天刚说&lt;a href="http://mood2.karottc.com/posts/2018-06-18-leetcode/"&gt;刷完了初级算法，要开始刷中级算法的题目了&lt;/a&gt;。做了两天，今天就被打击了，打击的原因并不是因为没有做出这道题，而是，&lt;strong&gt;一个多月之前我做出了这道题，现在却没有做出来&lt;/strong&gt;。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_07_leetcode05.png" alt="LeetCode第五题·提交记录" /&gt;&lt;figcaption&gt;LeetCode第五题·提交记录&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;看到这个提交记录之后我就回想起来了，当时是完全靠自己想出来的，因为提交了三次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次：880 ms&lt;/li&gt;
&lt;li&gt;第二次：88 ms&lt;/li&gt;
&lt;li&gt;第三次：8 ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是我在不停的优化算法，将速度提升了100倍（在没有去网上google的情况下，完全自己想的），所以当时印象还相当深的，然而，现在却一丁点儿也想不起来，气的都想把脑袋给敲碎了。面对这样的事实，哪里还有信心啊，刷题的效果完全没有体现出来，就不说能够完全记住了，就是做过之后的印象和思路都不记得了。&lt;/p&gt;
&lt;p&gt;可能，这种做题也和当时的状态很有关系吧。&lt;/p&gt;
&lt;p&gt;反正都这么笨了，还能怎么办呢，那就时常review，多思考吧。😌&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:mood2.karottc.com,2018-06-20:/posts/2018-06-20-fuck-gfw/</id>
    <title type="html">操蛋的GFW</title>
    <published>2018-06-20T13:50:17Z</published>
    <updated>2018-06-20T14:00:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-06-20-fuck-gfw/"/>
    <content type="html">&lt;h3 id="序"&gt;序&lt;/h3&gt;
&lt;p&gt;今天在公司上课，17：30左右打开网页变慢了，甚至根本打不开，公司Wifi，手机联通4G都试过了，还是不行，刚开始以为是我的DNS挂了，后面才发现是ss的问题，因为公司的Wifi是默认翻墙的，但是我的手机是一天24小时连着VPN的，基本所有流量都会走shadowsocks这App。当时在上课，也没太注意这事。&lt;/p&gt;
&lt;p&gt;晚上上课刷到一个消息，说是今天下午开始了新一轮的封锁：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_04_gfw.png" alt="新一轮封锁" /&gt;&lt;figcaption&gt;新一轮封锁&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="证实"&gt;证实&lt;/h3&gt;
&lt;p&gt;后面下班回到家，发现确实不能上网了，check了一下服务器的各种信息，本地也能ping通，所以可以确定两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP是没有问题（没有被封）；&lt;/li&gt;
&lt;li&gt;网络也没有问题；&lt;/li&gt;
&lt;li&gt;机器防火墙应该也没有问题（因为我没有改过，但是机器防火墙的管理页面，要翻墙才能看的，所以现在没法去check）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面登录到机器上去检查各项配置和Log，发现下面的信息：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_05_gfw.png" alt="错误Log" /&gt;&lt;figcaption&gt;错误Log&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;猜测是防火墙在包里面加了东西导致服务器解密失败，后面验证了一下，连接之后大量的包根本没有到服务器，然后验证了一下其他地区的ss机器，发现这个到不了应该是端口被封了，我现在用的是 &lt;strong&gt;80&lt;/strong&gt; 端口，所以我马上换了一个端口，再试，恢复了。目前的情况是和前面的消息能对应上的，下午开始防火墙随机丢包和端口阻断。&lt;/p&gt;
&lt;h3 id="应对"&gt;应对&lt;/h3&gt;
&lt;p&gt;最简单的方式，就是保证随时不止一个翻墙的方式可用。我们做技术的都知道怎么来保证高可用性：&lt;strong&gt;异地多活，多地多中心&lt;/strong&gt;。这样全部同时挂掉的概率就非常小了。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_06_gfw.png" alt="异地多活，多个中心" /&gt;&lt;figcaption&gt;异地多活，多个中心&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="尾"&gt;尾&lt;/h3&gt;
&lt;p&gt;最后说一句，真是个操蛋的地方，普通的信息自由已经如此的艰难了。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:mood2.karottc.com,2018-06-18:/posts/2018-06-18-dragon-boat-festival/</id>
    <title type="html">端午节</title>
    <published>2018-06-18T13:28:17Z</published>
    <updated>2018-06-18T13:29:17Z</updated>
    <link rel="alternate" href="http://mood2.karottc.com/posts/2018-06-18-dragon-boat-festival/"/>
    <content type="html">&lt;p&gt;今年端午节三天假期，哪里都没有去，回想着半年，不仅端午节没有出去玩，任何节日都没有出去玩，任何非节日还是没有出去玩，一直窝在家里，想来有点对不住媳妇，有点愧疚。&lt;/p&gt;
&lt;p&gt;在家三天，每天都在家做饭，最后一天假期的晚上的去体育馆跑步了🏃，这三天大概做了几件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写完了一篇很长的毕业这几年的回忆录；&lt;/li&gt;
&lt;li&gt;把LeetCode的初级算法的练习题刷完了；&lt;/li&gt;
&lt;li&gt;去定了一套西装；&lt;/li&gt;
&lt;li&gt;看了一些剧：
&lt;ul&gt;
&lt;li&gt;【创造101】，这个每周一期；&lt;/li&gt;
&lt;li&gt;【东方华尔街】，最后一集；&lt;/li&gt;
&lt;li&gt;【远大前程】，随便看了几集；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_02_festival.jpg" alt="端午节" /&gt;&lt;figcaption&gt;端午节&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="跑步"&gt;跑步&lt;/h3&gt;
&lt;p&gt;这半年断断续续也跑了好几次了，但是跑步还是差的不行，三公里差不多花了30分钟。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_03_run.png" alt="跑步" /&gt;&lt;figcaption&gt;跑步&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;现在依然每次跑步左腹都会痛，应该是呼吸没有调整好的原因，但是试了很多方法，也没有效果，可能没找到正确方法。不过，我在跑步机上跑步就不会痛。这个日常锻炼也会坚持下去，希望能够恢复到2015年的运动效果和状态。&lt;/p&gt;
</content>
  </entry>
</feed>

